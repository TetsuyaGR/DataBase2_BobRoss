--- drop function
drop function if exists creatdb();
drop function if exists dropdb();
drop function if exists insertdb();

CREATE FUNCTION dropdb()
returns void AS 
$$

DROP TABLE IF EXISTS 
  katalogos,
  paraggelia,
  receipt,
  trapezi,
  servitoros,
  log_file;

$$ LANGUAGE SQL;


--- create function

CREATE FUNCTION creatdb()
returns void as 
$$

CREATE TABLE katalogos(
  kid SERIAL,
  konoma VARCHAR(25),
  price real constraint c_price check (price>0),
  availability INT constraint c_availability check (availability=0 or availability>0),
  category VARCHAR(25) constraint c_category check (category in ('ÎšÏ…Ï?Î¹Î¿Ï‚','ÎŸÏ?ÎµÎºÏ„Î¹ÎºÎ¿','Î•Ï€Î¹Î´Î¿Ï?Ï€Î¹Î¿','Î£Î±Î»Î±Ï„Î±','Î‘Î½Î±ÏˆÏ…ÎºÏ„Î¹ÎºÎ¿','ÎšÏ?Î±ÏƒÎ¹','ÎœÏ€Ï…Ï?Î±')),
  constraint c_kid PRIMARY KEY(kid)
);

 CREATE TABLE servitoros (
  sid serial,
  onoma VARCHAR(50),
  constraint c_sid PRIMARY KEY(sid)
);                                                                
                                                                 
CREATE TABLE receipt (
  rid serial,
  dateTime TIMESTAMP,
  servitorosID INT not null constraint f_key3 references servitoros(sid),
  constraint c_rid primary key(rid)
);                                                                
                                                                 
                                                                 
CREATE TABLE paraggelia(
  pid serial,
  katalogosID integer not null constraint f_key1 references katalogos(kid) ,
  amount INT,
  receiptID INT not null constraint f_key2 references receipt(rid),
  constraint c_pid primary key(pid)	
);
                                                                 
                                                                 
CREATE TABLE trapezi (
  tid serial,
  receiptID INT constraint f_key references receipt(rid),
  constraint c_tid primary key(tid)	
  );


create table log_file(
table_name text not null,
operation char(1) NOT NULL,
stamp timestamp NOT NULL,
userid varchar(20) NOT NULL
);

-- creating triggers
CREATE TRIGGER log_file
AFTER INSERT OR UPDATE OR DELETE ON katalogos
FOR EACH ROW EXECUTE PROCEDURE process_log_file();

CREATE TRIGGER log_file
AFTER INSERT OR UPDATE OR DELETE ON servitoros
FOR EACH ROW EXECUTE PROCEDURE process_log_file();

CREATE TRIGGER log_file
AFTER INSERT OR UPDATE OR DELETE ON receipt
FOR EACH ROW EXECUTE PROCEDURE process_log_file();

CREATE TRIGGER log_file
AFTER INSERT OR UPDATE OR DELETE ON paraggelia
FOR EACH ROW EXECUTE PROCEDURE process_log_file();

CREATE TRIGGER log_file
AFTER INSERT OR UPDATE OR DELETE ON trapezi
FOR EACH ROW EXECUTE PROCEDURE process_log_file();

create trigger updateamounttrigger
after insert on paraggelia 
for each row 
execute procedure updateamount();
$$ LANGUAGE SQL;

--ÎšÎ±Î¸Îµ Ï†Î¿Ï?Î± Ï€Î¿Ï… Ï€ÎµÏ?Î½Î±Î¼Îµ Î¼Î¹Î± Ï€Î±Ï?Î±Î³Î³ÎµÎ»Î¹Î±, Î¸Î± Î¼ÎµÎ¹Ï‰Î½ÎµÎ¹ Ï„Î· Î´Î¹Î±Î¸ÎµÏƒÎ·Î¼Î¿Ï„Î·Ï„Î± Ï„Î¿Ï… Ï€Ï?Î¿Î¹ÏŒÎ½Ï„Î¿Ï‚
--Ï‡Ï?ÎµÎ¹Î±Î¶ÎµÏ„Î±Î¹ trigger ÎµÏ„ÏƒÎ¹ Ï‰ÏƒÏ„Îµ Î¿Ï„Î±Î½ Î³Î¹Î½ÎµÏ„Î±Î¹ insert Î¼Î¹Î±Ï‚ Ï€Î±Ï?Î±Î³Î³ÎµÎ»Î¹Î±Ï‚ Î½Î± Î³Î¹Î½ÎµÏ„Î±Î¹
--Î±Ï†Î±Î¹Ï?ÎµÏƒÎ· Ï„Ï‰Î½ Ï„ÎµÎ¼Î±Ï‡Î¹Ï‰Î½ Ï„Ï‰Î½ Ï†Î±Î³Î·Ï„Ï‰Î½ Î±Ï€Î¿ Ï„Î¿Î½ ÎºÎ±Ï„Î±Î»Î¿Î³Î¿

create or replace function updateamount() returns trigger as $$
begin 
	update katalogos 
	set availability=availability-new.amount
	where kid=new.katalogosid;
	return null;
end;
$$ language plpgsql;
								 
								 
---log file

CREATE OR REPLACE FUNCTION process_log_file()
RETURNS TRIGGER AS $$
declare tname text ;
BEGIN
tname := TG_TABLE_NAME || ' ';
IF (TG_OP = 'DELETE') THEN
INSERT INTO log_file SELECT tname,'D', now(), user;
ELSIF (TG_OP = 'UPDATE') THEN
INSERT INTO log_file SELECT tname,'U', now(), user;
ELSIF (TG_OP = 'INSERT') THEN
INSERT INTO log_file SELECT tname,'I', now(), user;
END IF;
RETURN NULL;
END;
$$ LANGUAGE plpgsql;
								 			 
--- insert function

CREATE FUNCTION insertdb()
returns void as 
$$
BEGIN
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('Ï„Î¿Ï…Ï?Ï„Î±', 7.5, 20, 'Î•Ï€Î¹Î´Î¿Ï?Ï€Î¹Î¿');
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('Î¼Î¿Ï…ÏƒÎ±ÎºÎ±Ï‚', 6.5, 0, 'ÎšÏ…Ï?Î¹Î¿Ï‚');
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('ÏƒÎ¿Ï…Î²Î»Î±ÎºÎ¹Î±', 5.5, 35, 'ÎšÏ…Ï?Î¹Î¿Ï‚');
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('Î¼Ï€Ï?Î¹Î¶Î¿Î»Î±', 9, 32, 'ÎšÏ…Ï?Î¹Î¿Ï‚');
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('Ï€Î±Ï„Î±Ï„ÎµÏ‚', 2.5, 40, 'ÎŸÏ?ÎµÎºÏ„Î¹ÎºÎ¿');
INSERT INTO katalogos(konoma, price, availability, category) VALUES ('Ï‡Ï‰Ï?Î¹Î±Ï„Î¹ÎºÎ·', 2.5, 40, 'Î£Î±Î»Î±Ï„Î±');
   
INSERT INTO servitoros(onoma) VALUES ('Î˜Î±Î½Î¿Ï‚');
INSERT INTO servitoros(onoma) VALUES ('Î£Î¿Ï†Î¹Î±');
INSERT INTO servitoros(onoma) VALUES ('ÎšÏ‰ÏƒÏ„Î±Ï‚');                                                                 
                                                                
INSERT INTO receipt(dateTime, servitorosID) VALUES ('2020-11-09 16:02:17.623919', 1);
INSERT INTO receipt(dateTime, servitorosID) VALUES ('2020-11-09 16:02:17.697942',2);
INSERT INTO receipt(dateTime, servitorosID) VALUES ('2020-11-09 16:02:17.769762',1);
INSERT INTO receipt(dateTime, servitorosID) VALUES ('2020-11-09 16:30:54.850303',2);
INSERT INTO receipt(dateTime, servitorosID) VALUES (NOW(),3);
INSERT INTO receipt(dateTime, servitorosID) VALUES (NOW(),3);                                                              
                                                                 
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (4, 1, 6);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (6, 1, 5);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (3, 2, 4);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (1, 3, 3);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (5, 2, 2);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (4, 3, 1);
INSERT INTO paraggelia(katalogosID, amount, receiptID) VALUES (3, 2, 5);
                                                                 

INSERT INTO trapezi(receiptid) VALUES (5);
INSERT INTO trapezi(receiptid) VALUES (3);
INSERT INTO trapezi(receiptid) VALUES (1);
INSERT INTO trapezi(receiptid) VALUES (6);
INSERT INTO trapezi(receiptid) VALUES (2);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
INSERT INTO trapezi(receiptid) VALUES (null);
END
$$ LANGUAGE plpgsql;

---dynamic queries


-- Î¤Ï?Î±Ï€Î­Î¶Î¹Î± Ï€Î¿Ï… ÏƒÎµÏ?Î²Î¯Ï?ÎµÎ¹ Î¿ ÏƒÎµÏ?Î²Î¹Ï„Î¿Ï?Î¿Ï‚ x

create or replace function getTrapezia(int) returns 
setof int as $$
	begin
	select distinct t.tid from trapezi t
	join receipt r on (r.rid=t.receiptID)
	where r.servitorosID=$1;
	end
$$ language plpgsql;


-- Î¤Î¹ Ï‡Ï?Ï‰ÏƒÏ„Î¬ÎµÎ¹ Ï„Î¿ Ï„Ï?Î±Ï€Î­Î¶Î¹ x

create or replace function getLogariasmo(float) returns float as $$
  begin
  select SUM(price*amount) FROM receipt r
  JOIN trapezi t ON t.receiptID=r.rid
  join paraggelia p on p.receiptID=r.rid
  JOIN katalogos kat ON kat.kid=p.katalogosid
  WHERE t.tid=$1;
  end
$$ language plpgsql;

-- Î Î¿ÏƒÎ± x category ÎµÏ‡ÎµÎ¹ Ï€Î±Ï?ÎµÎ¹ Ï„Î¿ Ï„Ï?Î±Ï€ÎµÎ¶Î¹ y

 create or replace function getPosothta(bigint,varchar) returns 
 setof bigint as 
 $$
  begin
  SELECT COUNT(*) FROM receipt r
  JOIN paraggelia p ON p.receiptid=r.rid
  JOIN trapezi t ON t.receiptID=r.rid
  JOIN katalogos kat ON kat.kid=p.katalogosid
  WHERE t.tid=$1 AND category=$2;
  end
$$ language plpgsql;

  
-- Î Î¿Î¹Î± Ï„Ï?Î±Ï€ÎµÎ¶Î¹Î± ÎµÏ‡Î¿Ï…Î½ Ï€Î±Ï?ÎµÎ¹ Ï„Î·Î½ x ÎµÏ€Î¹Î»Î¿Î³Î· Î±Ï€Î¿ Ï„Î¿Î½ ÎºÎ±Ï„Î±Î»Î¿Î³Î¿

create or replace function getEpilogh(varchar) returns 
setof int as $$
    begin
	SELECT DISTINCT t.tid FROM trapezi t
	JOIN receipt r ON r.rid=t.receiptid
	JOIN paraggelia p ON p.receiptid=r.rid
	JOIN katalogos kat ON kat.kid=p.katalogosid
	WHERE kat.konoma=$1;
    end
$$ language plpgsql;

-- Î Î¿Î¹Î± Ï„Ï?Î±Ï€ÎµÎ¶Î¹Î± ÎµÎ¹Î½Î±Î¹ ÎµÎ»ÎµÏ…Î¸ÎµÏ?Î±

create or replace function getDiathesima() returns 
setof int as $$
    begin
	SELECT t.tid FROM trapezi t
	WHERE t.receiptid IS NULL;
    end
 $$ language plpgsql;

 -- Î Î¿Î¹ÎµÏ‚ Ï€Î±Ï?Î±Î³Î³ÎµÎ»Î¹ÎµÏ‚ ÎµÏ‡Î¿Ï…Î½ Î»Î¿Î³Î±Ï?Î¹Î±ÏƒÎ¼Î¿ Ï€Î±Î½Ï‰ Î±Ï€Î¿ x ÎµÏ…Ï?ÏŽ

create or replace function getposo(float) returns
setof int as $$
    begin
	select p.pid from paraggelia p
	join  receipt r on p.receiptID=r.rid 
	join katalogos kat ON kat.kid=p.katalogosid
	group by p.pid
	having SUM(kat.price*p.amount)>$1;
    end
$$ language plpgsql;


-- ÎŸÎ»Î± Ï„Î± Î³ÎµÏ…Î¼Î±Ï„Î± Î³Î¹Î± Ï„Î¿ x category

create or replace function getGeumata(varchar) returns 
setof varchar as $$
    begin
	select konoma from katalogos k
	where k.category=$1;
    end
$$ language plpgsql;


-- Î Î¿Î¹Î± Ï†Î±Î³Î·Ï„Î± Î´ÎµÎ½ ÎµÎ¹Î½Î±Î¹ Î´Î¹Î±Î¸ÎµÏƒÎ·Î¼Î±

create or replace function getNotDiathesimaFaghta() returns 
setof varchar as $$
    begin
	SELECT k.konoma FROM katalogos k
	WHERE k.availability=0;
    end
 $$ language plpgsql;


-- Î¤Î±Î¼ÎµÎ¹Î¿ Î·Î¼ÎµÏ?Î±Ï‚

create or replace function getTameioHmeras() returns float as $$
    begin
	select SUM(kat.price*p.amount) as tameiohmeras from paraggelia p 
	join receipt r on p.receiptID=r.rid 
	join katalogos kat ON kat.kid=p.katalogosid;
    end
$$ language plpgsql;

-- Î Î¿ÏƒÎµÏ‚ Î¼ÎµÏ?Î¹Î´ÎµÏ‚ ÎµÏ‡Î¿Ï…Î½ Î¼ÎµÎ¹Î½ÎµÎ¹ Î±Ï€Î¿ Ï„Î¿ x Ï†Î±Î³Î·Ï„Î¿

create or replace function getMerides(int) returns int as $$
	begin
	select k.availability from katalogos k 
	join paraggelia p on p.katalogosid=p.pid
	where k.kid=$1;
    end
$$ language plpgsql;
